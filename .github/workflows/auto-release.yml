name: Auto Release

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'config.json'
      - 'server/**'
      - 'frontend/**'
      - 'scripts/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'config.json'
      - 'server/**'
      - 'frontend/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      force_release:
        description: '强制发布Release'
        required: false
        default: 'false'
        type: boolean
      check_version:
        description: '检查版本号变更'
        required: false
        default: 'true'
        type: boolean

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # 需要获取历史记录来比较版本
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/aii-home/package-lock.json
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('server/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Check version change
      id: version_check
      run: |
        # 给脚本执行权限
        chmod +x scripts/version-check.sh
        
        # 检查版本号变更
        if ./scripts/version-check.sh; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "Version change detected, proceeding with build"
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "No version change detected"
        fi
        
    - name: Check if build is needed
      id: build_check
      run: |
        # 如果是强制发布或者版本变更，则构建
        if [[ "${{ inputs.force_release }}" == "true" ]] || [[ "${{ steps.version_check.outputs.version_changed }}" == "true" ]]; then
          echo "build_needed=true" >> $GITHUB_OUTPUT
          echo "Build is needed"
        else
          echo "build_needed=false" >> $GITHUB_OUTPUT
          echo "Build is not needed, skipping"
        fi
        
    - name: Initialize Go module
      if: steps.build_check.outputs.build_needed == 'true'
      run: |
        # 初始化Go模块
        go mod init negaihoshi
        # 添加必要的依赖
        go mod tidy
        # 下载依赖
        go mod download
        # 验证依赖
        go mod verify
        
    - name: Build backend (Linux)
      if: steps.build_check.outputs.build_needed == 'true'
      run: |
        # 构建Linux版本
        GOOS=linux GOARCH=amd64 go build -o negaihoshi-linux-amd64 server/main.go
        
    - name: Build backend (Windows)
      if: steps.build_check.outputs.build_needed == 'true'
      run: |
        # 构建Windows版本
        GOOS=windows GOARCH=amd64 go build -o negaihoshi-windows-amd64.exe server/main.go
        
    - name: Build backend (macOS)
      if: steps.build_check.outputs.build_needed == 'true'
      run: |
        # 构建macOS版本
        GOOS=darwin GOARCH=amd64 go build -o negaihoshi-darwin-amd64 server/main.go
        GOOS=darwin GOARCH=arm64 go build -o negaihoshi-darwin-arm64 server/main.go
        
    - name: Build frontend (main)
      if: steps.build_check.outputs.build_needed == 'true'
      run: |
        cd frontend/aii-home
        npm ci
        npm run build
        
    - name: Build frontend (admin)
      if: steps.build_check.outputs.build_needed == 'true'
      run: |
        cd frontend/admin
        npm ci
        npm run build
        
    - name: Create release package
      if: steps.build_check.outputs.build_needed == 'true'
      run: |
        mkdir -p release
        # 复制所有平台的后端可执行文件
        cp negaihoshi-linux-amd64 release/
        cp negaihoshi-windows-amd64.exe release/
        cp negaihoshi-darwin-amd64 release/
        cp negaihoshi-darwin-arm64 release/
        
        # 创建平台特定的目录结构
        mkdir -p release/linux-amd64
        mkdir -p release/windows-amd64
        mkdir -p release/darwin-amd64
        mkdir -p release/darwin-arm64
        
        # 复制可执行文件到对应平台目录
        cp negaihoshi-linux-amd64 release/linux-amd64/negaihoshi
        cp negaihoshi-windows-amd64.exe release/windows-amd64/negaihoshi.exe
        cp negaihoshi-darwin-amd64 release/darwin-amd64/negaihoshi
        cp negaihoshi-darwin-arm64 release/darwin-arm64/negaihoshi
        
        # 复制前端构建文件
        cp -r frontend/aii-home/dist release/frontend-main
        cp -r frontend/admin/dist release/frontend-admin
        
        # 复制配置文件和其他文件
        cp config.json release/
        cp docker-compose.yml release/
        cp -r scripts release/
        cp README.md release/
        
        # 创建平台特定的启动脚本
        echo '#!/bin/bash' > release/linux-amd64/start.sh
        echo 'chmod +x ./negaihoshi' >> release/linux-amd64/start.sh
        echo './negaihoshi' >> release/linux-amd64/start.sh
        chmod +x release/linux-amd64/start.sh
        
        echo '@echo off' > release/windows-amd64/start.bat
        echo 'negaihoshi.exe' >> release/windows-amd64/start.bat
        
        echo '#!/bin/bash' > release/darwin-amd64/start.sh
        echo 'chmod +x ./negaihoshi' >> release/darwin-amd64/start.sh
        echo './negaihoshi' >> release/darwin-amd64/start.sh
        chmod +x release/darwin-amd64/start.sh
        
        echo '#!/bin/bash' > release/darwin-arm64/start.sh
        echo 'chmod +x ./negaihoshi' >> release/darwin-arm64/start.sh
        echo './negaihoshi' >> release/darwin-arm64/start.sh
        chmod +x release/darwin-arm64/start.sh
        
        # Create zip file
        cd release
        zip -r negaihoshi-${{ github.ref_name }}-multi-platform.zip .
        
    - name: Get version
      if: steps.build_check.outputs.build_needed == 'true'
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          # 从配置文件读取版本号
          VERSION=$(grep '"version"' config.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          SUFFIX=$(grep '"version_suffix"' config.json | sed 's/.*"version_suffix": *"\([^"]*\)".*/\1/')
          if [[ -n "$SUFFIX" ]]; then
            VERSION="${VERSION}-${SUFFIX}"
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create Release
      if: steps.build_check.outputs.build_needed == 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: release/negaihoshi-${{ github.ref_name }}-multi-platform.zip
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## Negaihoshi Release ${{ steps.get_version.outputs.version }}
          
          ### What's New
          - Multi-platform backend binaries (Linux, Windows, macOS)
          - Auto-generated release package
          - Frontend builds included
          
          ### Version Information
          - **Version**: ${{ steps.get_version.outputs.version }}
          - **Build Date**: ${{ github.event.head_commit.timestamp }}
          - **Commit**: ${{ github.sha }}
          - Configuration files included
          
          ### Installation
          1. Download and extract the zip file
          2. Navigate to your platform directory (e.g., `windows-amd64` for Windows)
          3. Run the startup script for your platform
          
          ### Platform Support
          - **Linux (AMD64)**: `linux-amd64/negaihoshi` + `start.sh`
          - **Windows (AMD64)**: `windows-amd64/negaihoshi.exe` + `start.bat`
          - **macOS (AMD64)**: `darwin-amd64/negaihoshi` + `start.sh`
          - **macOS (ARM64)**: `darwin-arm64/negaihoshi` + `start.sh`
          
          ### Files Included
          - Multi-platform backend binaries
          - Platform-specific startup scripts
          - `frontend-main/` - Main frontend build
          - `frontend-admin/` - Admin frontend build
          - `config.json` - Configuration file
          - `docker-compose.yml` - Docker configuration
          - `scripts/` - Startup scripts
          - `README.md` - Documentation
          
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-package
        path: release/negaihoshi-${{ github.ref_name }}-multi-platform.zip


